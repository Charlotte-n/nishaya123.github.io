import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as d,c as n,a,b as e,d as s,f as o}from"./app-56540502.js";const l="/assets/img-20d9f561.png",c="/assets/GitConfig-5fa6022d.png",h="/assets/Commond01-921fc6f9.png",g="/assets/Commond2-6385ef33.png",p="/assets/reset-9113c9c5.png",m="/assets/branch1-1c3c8fa6.png",f="/assets/confict-a3c459a2.png",u={},b=a("h1",{id:"git",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#git","aria-hidden":"true"},"#"),e(" Git")],-1),_={href:"https://www.liaoxuefeng.com/wiki/896043488029600",target:"_blank",rel:"noopener noreferrer"},x=a("br",null,null,-1),v=o(`<h2 id="git简介" tabindex="-1"><a class="header-anchor" href="#git简介" aria-hidden="true">#</a> Git简介</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>版本控制工具，进行备份
用来记录文件的变化，用于版本更新，并且记录以前的版本。
git是分布式版本控制系统
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+'" alt="img.png" tabindex="0" loading="lazy"><figcaption>img.png</figcaption></figure><h2 id="git的基本概念" tabindex="-1"><a class="header-anchor" href="#git的基本概念" aria-hidden="true">#</a> Git的基本概念</h2><h3 id="三个仓库" tabindex="-1"><a class="header-anchor" href="#三个仓库" aria-hidden="true">#</a> 三个仓库</h3><ol><li>工作区(就是编写代码的地方)</li><li>暂存区(把已经完成的文件放进这里)</li><li>Git仓库(当这个文件全部完成之后，放进Git仓库进行管理)</li></ol><h3 id="一些状态" tabindex="-1"><a class="header-anchor" href="#一些状态" aria-hidden="true">#</a> 一些状态</h3><p><strong>U:未跟踪,M:已修改,S:已暂存,A:新添加,&#39;&#39;:未修改</strong></p><h4 id="基本工作流程" tabindex="-1"><a class="header-anchor" href="#基本工作流程" aria-hidden="true">#</a> 基本工作流程</h4><p>基本的 Git 工作流程如下：</p><ol><li>在工作区中修改文件</li><li>将你想要下次提交的更改进行暂存</li><li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 仓库</li></ol><h2 id="git的使用" tabindex="-1"><a class="header-anchor" href="#git的使用" aria-hidden="true">#</a> Git的使用</h2><p>首先先下载，安装</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><figure><img src="'+c+'" alt="img.png" tabindex="0" loading="lazy"><figcaption>img.png</figcaption></figure><h3 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令" aria-hidden="true">#</a> 常用指令</h3><p><img src="'+h+'" alt="img.png" loading="lazy"><br><img src="'+g+'" alt="img.png" loading="lazy"></p><h4 id="修改和回退历史" tabindex="-1"><a class="header-anchor" href="#修改和回退历史" aria-hidden="true">#</a> 修改和回退历史</h4><p>版本回退<br><img src="'+p+`" alt="img.png" loading="lazy"></p><ol><li>未add但修改了(在工作区)</li><li>add了，但未commit</li><li>add和commit了<br> 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git restore (file)</li></ol><p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br> 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>结果：工作区文件回退。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git restore --staged (file)，就回到了场景1，第二步按场景1操作。</p><p>结果：暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。</p><p>场景3： 假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？<br> 已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。git reset --hard (id)</p><p>结果：工作区文件、暂存区文件、本地仓库都回退</p><p><strong>我的推荐是：尽量不要直接commit</strong></p><p>修改的时候，不要直接进行commit，要先add例子：<br><code>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git add -&gt; git commit</code></p><p>可以将两次的文件进行合并，最后进行提交</p><p><code>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git commit</code></p><p>这种只会提交第一次的</p><h3 id="删除文件" tabindex="-1"><a class="header-anchor" href="#删除文件" aria-hidden="true">#</a> 删除文件</h3><p>先手动删除文件，然后使用git add (file) 和git rm(file)效果是一样的。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>当你误删的话只能回退以前的版本，来进行恢复
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="分支" tabindex="-1"><a class="header-anchor" href="#分支" aria-hidden="true">#</a> 分支</h2><p><img src="`+m+'" alt="img.png" loading="lazy"><br> 上面有分支的指令（知道：增，删，合并，切换分支就可以了）</p><p>注意：合并主分支的时候要在主分支进行合并</p><h3 id="推送失败" tabindex="-1"><a class="header-anchor" href="#推送失败" aria-hidden="true">#</a> 推送失败</h3><ol><li><code>git pull</code>，再推送</li><li>如果<code>git pull</code>，再推送失败，按照报错的操作进行推送</li></ol><h3 id="分支合并遇到冲突" tabindex="-1"><a class="header-anchor" href="#分支合并遇到冲突" aria-hidden="true">#</a> 分支合并遇到冲突</h3><p>手动解决冲突，再进行合并<br><img src="'+f+'" alt="img.png" loading="lazy"></p><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><h2 id="多人协作" tabindex="-1"><a class="header-anchor" href="#多人协作" aria-hidden="true">#</a> 多人协作</h2>',43);function G(y,z){const i=r("ExternalLinkIcon");return d(),n("div",null,[b,a("p",null,[e("可以参考"),a("a",_,[e("廖雪峰Git"),s(i)]),x,e(" 提示:下面有的命令用()来包裹的，应该为<>")]),v])}const C=t(u,[["render",G],["__file","Git.html.vue"]]);export{C as default};
