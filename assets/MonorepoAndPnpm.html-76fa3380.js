import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,f as n}from"./app-56540502.js";const l={},s=n(`<h1 id="pnpm和monorepo" tabindex="-1"><a class="header-anchor" href="#pnpm和monorepo" aria-hidden="true">#</a> pnpm和monorepo</h1><h2 id="pnpm简介" tabindex="-1"><a class="header-anchor" href="#pnpm简介" aria-hidden="true">#</a> pnpm简介</h2><ol><li>是一个管理一些包的</li><li>快速，节约磁盘空间：会下载到项目本地不需要反复安装，节约网络带宽，更好的依赖处理</li></ol><h2 id="monorepo简介-一个仓库中管理多个不同项目" tabindex="-1"><a class="header-anchor" href="#monorepo简介-一个仓库中管理多个不同项目" aria-hidden="true">#</a> monorepo简介（一个仓库中管理多个不同项目）</h2><ol><li>模块的抽离和再利用</li><li>例子 <ol><li>当有10个项目</li><li>每个项目都用到了轮播图</li><li>可以把它作为一个本地项目中的包</li><li>pnpm add xxxx</li><li>总的来说就是项目中需要的公共模块，可以做成本地项目的包，来引用进行使用</li></ol></li></ol><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h2><ol><li>可以在多个项目中同时使用同一个代码规范（elint git hook等配置）</li><li>下载依赖的话：-w为在monorepo根目录下载依赖</li><li>便于管理多个相互依赖的项目</li><li>便于团队共享知识库（学习你的代码，因为所有项目的放在了这个仓库）</li><li>减少项目管理成本</li></ol><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><ol><li>版本管理混乱</li><li>代码质量参差不起（版本历史要进行压缩，git里面的提交历史）</li><li>技术栈难以更新</li><li>难以进行权限管理</li></ol><h2 id="文件目录和配置" tabindex="-1"><a class="header-anchor" href="#文件目录和配置" aria-hidden="true">#</a> 文件目录和配置</h2><p>文件目录<br> monorepo，当多个仓库使用相同的包，就可以使用monorepo</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">-</span>packages <span class="token comment">//放前端的项目</span>
<span class="token operator">-</span>components <span class="token comment">//放公共的组件</span>
<span class="token operator">-</span>pnpm<span class="token operator">-</span>workspace<span class="token punctuation">.</span>yaml <span class="token comment">//放配置文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在pnpm-workspace.yaml中设置以下内容
packages:
# 我负责的所有前端项目储存的地方
- &#39;packages/*&#39;
# 公共的：给我所有的项目使用的公开组件
- &#39;components/**&#39;
# exclude packages that are inside test directories
- &#39;!**/test/**&#39;
# 公共的方法
- &quot;api/**&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最后打包的时候报错了" tabindex="-1"><a class="header-anchor" href="#最后打包的时候报错了" aria-hidden="true">#</a> 最后打包的时候报错了</h2><p>给这个组件的依赖安装上，（vue依赖）</p><h2 id="项目实战" tabindex="-1"><a class="header-anchor" href="#项目实战" aria-hidden="true">#</a> 项目实战</h2><ol><li>根据上面的步骤进行配置</li><li>在packages里面放一些前端项目的储存（也可以放一些公共的定义，数据定义，网络请求，样式，工具等等放在一个文件夹里面），就是一些单页面应用，components来存放一些公共组件，当使用的时候进行下载，api来存放一些公共的方法</li><li>最好给每一个项目/模块进行命名，来进行区分</li><li>安装依赖：需要什么依赖，在对应项目中使用pnpm来下载就可以了</li></ol><h2 id="常见问题-关注前端工程化-各司其职" tabindex="-1"><a class="header-anchor" href="#常见问题-关注前端工程化-各司其职" aria-hidden="true">#</a> 常见问题（关注前端工程化，各司其职）</h2><ol><li>了解每一个工具是干什么的</li><li>pnpm生成依赖目录node_modules</li><li>脚手架负责在工作目录内构建开发环境，打包项目</li><li>lock记录的版本号</li><li>package.json负责记录依赖和脚本</li><li>每个工具都有各自负责的，a的事情不能交给b的事情，a出问题也不是b导致的</li><li>需要给每个项目文件夹配置单独的入口文件main. js/.ts是我们的入口文件，整个项目工程入口,因为每一个项目都是独立的</li><li>怎么打包，启动开发环境：单个项目和以前的启动是一样的。整个项目，自己写脚本（在总的package.json中写脚本）</li><li>总之：需要啥依赖进行下载，具体下载可以直接pnpm add 包名字（就是上面你更改的名字）,或者写上依赖,然后pnpm i</li></ol>`,19),o=[s];function r(d,p){return a(),i("div",null,o)}const m=e(l,[["render",r],["__file","MonorepoAndPnpm.html.vue"]]);export{m as default};
